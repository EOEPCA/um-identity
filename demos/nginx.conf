    server {
      listen 80;
      server_name _;
      add_header Strict-Transport-Security max-age=2592000;


      location / {
        #root /data/www;
        proxy_pass       http://gatekeeper:3000;
        #proxy_set_header Host $host;
        #proxy_set_header X-Real-IP $remote_addr;
        #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #proxy_set_header X-Scheme $scheme;
        #proxy_set_header X-Forwarded-Host $host:80;
        #proxy_set_header X-Forwarded-Port 80;
        #proxy_set_header X-Forwarded-Server $host;
        #proxy_set_header X-Forwarded-Proto $scheme;
        #proxy_connect_timeout 1;
        #proxy_send_timeout 30;
        #proxy_read_timeout 30;
        #proxy_http_version 1.1;

        #auth_request /oauth/authorize;
        #error_page 401 = /oauth/authorize?rd=$scheme://$host$request_uri;

        # pass information via X-User and X-Email headers to backend,
        # requires running with --set-xauthrequest flag
        #auth_request_set $user   $upstream_http_x_auth_request_user;
        #auth_request_set $email  $upstream_http_x_auth_request_email;
        #proxy_set_header X-User  $user;
        #proxy_set_header X-Email $email;

        # if you enabled --pass-access-token, this will pass the token to the backend
        #auth_request_set $token  $upstream_http_x_auth_request_access_token;
        #proxy_set_header X-Access-Token $token;

        # if you enabled --cookie-refresh, this is needed for it to work with auth_request
        #auth_request_set $auth_cookie $upstream_http_set_cookie;
        #add_header Set-Cookie $auth_cookie;

        # When using the --set-authorization-header flag, some provider's cookies can exceed the 4kb
        # limit and so the OAuth2 Proxy splits these into multiple parts.
        # Nginx normally only copies the first `Set-Cookie` header from the auth_request to the response,
        # so if your cookies are larger than 4kb, you will need to extract additional cookies manually.
        #auth_request_set $auth_cookie_name_upstream_1 $upstream_cookie_auth_cookie_name_1;

        # Extract the Cookie attributes from the first Set-Cookie header and append them
        # to the second part ($upstream_cookie_* variables only contain the raw cookie content)
        #if ($auth_cookie ~* "(; .*)") {
        #    set $auth_cookie_name_0 $auth_cookie;
        #    set $auth_cookie_name_1 "auth_cookie_name_1=$auth_cookie_name_upstream_1$1";
        #}

        # Send both Set-Cookie headers now if there was a second part
        #if ($auth_cookie_name_upstream_1) {
        #    add_header Set-Cookie $auth_cookie_name_0;
        #    add_header Set-Cookie $auth_cookie_name_1;
        #}
      }

      #location /oauth/* {
      #  expires -1;
      #  proxy_pass http://gatekeeper:3000;
      #  proxy_set_header Host $host;
      #  proxy_set_header X-Real-IP $remote_addr;
      #  proxy_set_header X-Scheme $scheme;
      #  proxy_set_header X-Auth-Request-Redirect $request_uri;
      #  proxy_set_header X-Forwarded-Proto $scheme;
      #  # or, if you are handling multiple domains:
      #  # proxy_set_header X-Auth-Request-Redirect $scheme://$host$request_uri;
      #}

      #location = /oauth/authorize {
      #  internal;
      #  proxy_pass http://gatekeeper:3000;
      #  proxy_set_header Host $host;
      #  proxy_set_header X-Real-IP $remote_addr;
      #  proxy_set_header X-Scheme $scheme;
      #  # nginx auth_request includes headers but not body
      #  proxy_set_header Content-Length "";
      #  proxy_pass_request_body off;
      #}

      #location = /oauth/logout {
      #  # Sign-out mutates the session, only allow POST requests
      #  if ($request_method != POST) {
      #      return 405;
      #  }
      #  expires -1;
      #  proxy_pass http://gatekeeper:3000;
      #  proxy_set_header Host $host;
      #  proxy_set_header X-Real-IP $remote_addr;
      #  proxy_set_header X-Scheme $scheme;
      #  proxy_set_header X-Forwarded-Proto $scheme;
      #  proxy_set_header X-Auth-Request-Redirect /oauth2/authorize;
      #}

      #location /realms {
      #  proxy_set_header Host $host;
      #  proxy_set_header X-Real-IP $remote_addr;
      #  proxy_set_header X-Forwarded-Proto $scheme;
      #  proxy_set_header X-Auth-Request-Redirect $request_uri;
      #  proxy_pass http://keycloak:8080;
      #}

     #location /resources {
     #   proxy_set_header Host $host;
     #   proxy_set_header X-Real-IP $remote_addr;
     #   proxy_set_header X-Forwarded-Proto $scheme;
     #   proxy_set_header X-Auth-Request-Redirect $request_uri;
     #   proxy_pass http://keycloak:8080;
     #}

     #location /js {
     #   proxy_set_header Host $host;
     #   proxy_set_header X-Real-IP $remote_addr;
     #   proxy_set_header X-Forwarded-Proto $scheme;
     #   proxy_set_header X-Auth-Request-Redirect $request_uri;
     #   proxy_pass http://keycloak:8080;
     #}

    }