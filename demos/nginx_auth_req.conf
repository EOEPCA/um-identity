    server {

      #listen 443 default ssl;
      listen 80;
      server_name resource-server-gatekeeper;
      add_header Strict-Transport-Security max-age=2592000;
      resolver 127.0.0.11;
      proxy_busy_buffers_size 64k;
      proxy_buffers 8 32k;
      proxy_buffer_size 32k;

      location / {
        root /data/www;
        proxy_pass http://spring-boot-oauth2-resource-server:7072;
        auth_request /oauth/authorize;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header X-Forwarded-Host $host:80;
        proxy_set_header X-Forwarded-Port 80;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 1;
        proxy_read_timeout 30;
        proxy_send_timeout 30;
        proxy_http_version 1.1;
        # pass information via X-User and X-Email headers to backend,
        # requires running with --set-xauthrequest flag
        auth_request_set $user   $upstream_http_x_auth_request_user;
        auth_request_set $email  $upstream_http_x_auth_request_email;
        proxy_set_header X-User  $user;
        proxy_set_header X-Email $email;
        # if you enabled --pass-access-token, this will pass the token to the backend
        auth_request_set $token  $upstream_http_x_auth_request_access_token;
        proxy_set_header X-Access-Token $token;
        # if you enabled --cookie-refresh, this is needed for it to work with auth_request
        auth_request_set $auth_cookie $upstream_http_set_cookie;
        add_header Set-Cookie $auth_cookie;
        # When using the --set-authorization-header flag, some provider's cookies can exceed the 4kb
        # limit and so the OAuth2 Proxy splits these into multiple parts.
        # Nginx normally only copies the first `Set-Cookie` header from the auth_request to the response,
        # so if your cookies are larger than 4kb, you will need to extract additional cookies manually.
        auth_request_set $auth_cookie_name_upstream_1 $upstream_cookie_auth_cookie_name_1;
        # Extract the Cookie attributes from the first Set-Cookie header and append them
        # to the second part ($upstream_cookie_* variables only contain the raw cookie content)
        if ($auth_cookie ~* "(; .*)") {
            set $auth_cookie_name_0 $auth_cookie;
            set $auth_cookie_name_1 "auth_cookie_name_1=$auth_cookie_name_upstream_1$1";
        }
        # Send both Set-Cookie headers now if there was a second part
        if ($auth_cookie_name_upstream_1) {
            add_header Set-Cookie $auth_cookie_name_0;
            add_header Set-Cookie $auth_cookie_name_1;
        }
      }

      location = /oauth/authorize {
        internal;
        #proxy_method POST;
        proxy_pass http://resource-server-gatekeeper:3001/;
        #proxy_set_header X-Real-IP $remote_addr;
        #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #proxy_set_header X-Scheme $scheme;
        #proxy_set_header X-Forwarded-Port 80;
        #proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Uri $request_uri;
        #proxy_set_header X-Original-Method $request_method;
        #proxy_set_header X-Scheme $scheme;
        proxy_set_header Content-Length "";
        proxy_pass_request_body off;
        proxy_intercept_errors on;
        error_page 303 = @handle_redirect;
      }

      location @handle_redirect {
        set $redirect_location 'http://resource-server-gatekeeper:3001/$upstream_http_location';
        proxy_pass $redirect_location;
        proxy_intercept_errors on;
        error_page 301 302 303 307 = @handle_redirect_auth;
     }

     location @handle_redirect_auth {
        set $auth_redirect_location '$upstream_http_location';
        proxy_pass $auth_redirect_location;
     }

#       location /oauth/ {
#         expires -1;
#         proxy_pass       http://gatekeeper:3000$request_uri;
#         proxy_set_header Host                    $host;
#         proxy_set_header X-Real-IP               $remote_addr;
#         proxy_set_header X-Scheme                $scheme;
#         proxy_set_header X-Auth-Request-Redirect $request_uri;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         # or, if you are handling multiple domains:
#         # proxy_set_header X-Auth-Request-Redirect $scheme://$host$request_uri;
#       }

#       location @handle_redirect {
#           set $saved_redirect_location '$upstream_http_location';
#           add_header X-debug "$saved_redirect_location";
#           proxy_pass $saved_redirect_location;
#       }

#       location = /oauth/logout {
#         # Sign-out mutates the session, only allow POST requests
#         if ($request_method != POST) {
#             return 405;
#         }
#         expires -1;
#         proxy_pass http://gatekeeper:3000/oauth/logout;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Scheme $scheme;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_set_header X-Auth-Request-Redirect /oauth/logout;
#       }

    }