# Default values for identity-api.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# ---------------------------------------
# Global variables
# ---------------------------------------
nameOverride: ""
namespaceOverride: ""
fullnameOverride: ""
restartPolicy: Always

# ---------------------------------------------
# Variable used in hpa template and deployment
# ---------------------------------------------
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# ---------------------------------------
# Variable used in Deployment template
# ---------------------------------------
deployment:
  replicaCount: 1
  # Additional Pod annotations
  podAnnotations: {}
  # Image pull secrets for the Pod
  imagePullSecrets: []
  # - name: myRegistrKeySecretName
  # SecurityContext for the entire Pod. Every container running in the Pod will inherit this SecurityContext. This might be relevant when other components of the environment inject additional containers into running Pods (service meshes are the most prominent example for this)
  podSecurityContext:
    fsGroup: 1000
  # SecurityContext for the identity-api container
  securityContext:
    runAsUser: 1000
    runAsNonRoot: true
  image:
    repository: ghcr.io/eoepca/um-identity-nginx
    pullPolicy: Always

  # Define which port will be used in the containers
  containerPort: 8080
  # Liveness probe configuration
  livenessProbe: |
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 0
    timeoutSeconds: 5
  # Readiness probe configuration
  readinessProbe: |
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 1
  # Startup probe configuration
  startupProbe: |
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 1
    failureThreshold: 60
    periodSeconds: 5
  # Pod resource requests and limits
  resources: {}
          # requests:
          #   cpu: "500m"
  #   memory: "1024Mi"
  # limits:
  #   cpu: "500m"
  #   memory: "1024Mi"
  # Node labels for Pod assignment
  nodeSelector: {}
  # Pod affinity
  affinity: {}
  # Node taints to tolerate
  tolerations: []

# ---------------------------------------
# Variable group used in ingress template
# ---------------------------------------
ingress:
  enabled: true
  className: ""
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web, websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    cert-manager.io/cluster-issuer: selfsigned-issuer
  hosts:
    - host: identity.nginx.local.eoepca.org
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: identity-nginx-tls-certificate
      hosts:
        - identity.nginx.local.eoepca.org

# ---------------------------------------
# Variable group used in ingress template
# ---------------------------------------
service:
  type: ClusterIP
  port: 8080

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

servers:
  enable: true
  data: |-
    #     server {
    #         listen 8080 default_server;
    #             server_name _;
    #             return 301 https://$host$request_uri;
    #     }
    server {
    #listen 443 default ssl;
    listen 8080;
    server_name oauth2-proxy;
    #ssl_certificate /etc/letsencrypt/live/auth.proxy.develop.eoepca.org/fullchain.pem;
    #ssl_certificate_key /etc/letsencrypt/live/auth.proxy.develop.eoepca.org/privkey.pem;
    add_header Strict-Transport-Security max-age=2592000;
    
    location /oauth2/ {
    expires -1;
    proxy_pass       http://oauth2-proxy:4443;
    proxy_set_header Host                    $host;
    proxy_set_header X-Real-IP               $remote_addr;
    proxy_set_header X-Scheme                $scheme;
    proxy_set_header X-Auth-Request-Redirect $request_uri;
    proxy_set_header X-Forwarded-Proto $scheme;
    # or, if you are handling multiple domains:
    # proxy_set_header X-Auth-Request-Redirect $scheme://$host$request_uri;
    }
    
    
    location = /oauth2/auth {
    internal;
    proxy_pass       http://oauth2-proxy:4443;
    proxy_set_header Host             $host;
    proxy_set_header X-Real-IP        $remote_addr;
    proxy_set_header X-Scheme         $scheme;
    # nginx auth_request includes headers but not body
    proxy_set_header Content-Length   "";
    proxy_pass_request_body     off;
    }
    
    location = /oauth2/sign_out {
    # Sign-out mutates the session, only allow POST requests
    if ($request_method != POST) {
    return 405;
    }
    expires -1;
    proxy_pass http://oauth2-proxy:4443;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Scheme $scheme;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Auth-Request-Redirect /oauth2/sign_in;
    }
    
    location /auth/realms {
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Auth-Request-Redirect $request_uri;
    proxy_pass http://keycloak:8080;
    }
    
    location /auth/resources {
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Auth-Request-Redirect $request_uri;
    proxy_pass http://keycloak:8080;
    }
    
    location /auth/js {
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP  $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Auth-Request-Redirect $request_uri;
    proxy_pass http://keycloak:8080;
    }
    
    location / {
    root /data/www;
    #proxy_pass       http://open-springboot-demo:7071;
    proxy_pass       http://keycloak-springboot-demo:7070;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Scheme $scheme;
    proxy_set_header X-Forwarded-Host $host:8080;
    proxy_set_header X-Forwarded-Port 8080;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_connect_timeout 1;
    proxy_send_timeout 30;
    proxy_read_timeout 30;
    proxy_http_version 1.1;
    
    auth_request /oauth2/auth;
    error_page 401 = /oauth2/sign_in?rd=$scheme://$host$request_uri;
    
    # pass information via X-User and X-Email headers to backend,
    # requires running with --set-xauthrequest flag
    auth_request_set $user   $upstream_http_x_auth_request_user;
    auth_request_set $email  $upstream_http_x_auth_request_email;
    proxy_set_header X-User  $user;
    proxy_set_header X-Email $email;
    
    # if you enabled --pass-access-token, this will pass the token to the backend
    auth_request_set $token  $upstream_http_x_auth_request_access_token;
    proxy_set_header X-Access-Token $token;
    
    # if you enabled --cookie-refresh, this is needed for it to work with auth_request
    auth_request_set $auth_cookie $upstream_http_set_cookie;
    add_header Set-Cookie $auth_cookie;
    
    # When using the --set-authorization-header flag, some provider's cookies can exceed the 4kb
    # limit and so the OAuth2 Proxy splits these into multiple parts.
    # Nginx normally only copies the first `Set-Cookie` header from the auth_request to the response,
    # so if your cookies are larger than 4kb, you will need to extract additional cookies manually.
    auth_request_set $auth_cookie_name_upstream_1 $upstream_cookie_auth_cookie_name_1;
    
    # Extract the Cookie attributes from the first Set-Cookie header and append them
    # to the second part ($upstream_cookie_* variables only contain the raw cookie content)
    if ($auth_cookie ~* "(; .*)") {
    set $auth_cookie_name_0 $auth_cookie;
    set $auth_cookie_name_1 "auth_cookie_name_1=$auth_cookie_name_upstream_1$1";
    }
    
    # Send both Set-Cookie headers now if there was a second part
    if ($auth_cookie_name_upstream_1) {
    add_header Set-Cookie $auth_cookie_name_0;
    add_header Set-Cookie $auth_cookie_name_1;
    }
    }
    }